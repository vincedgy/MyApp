!function(){"user strict";var e=angular.module("myApp",["ngRoute","ngAnimate","ngSanitize","ngToast","ngplus","ui.bootstrap","ngResource","myApp.controllers","myApp.attendeesController","myApp.sessionsListCtrl","myApp.sessionCtrl","myApp.SessionSrv","myApp.attendeesServices","myApp.directives","myApp.filters","ui.grid","ui.grid.selection"]);e.constant("config",{ver:"0.1.0",partial_dir:"partials",dirs:{base:"app/",api:{session:"/api/session/",attendee:"/api/attendee/"},views:{partials:"partials/",layout:"layout/",sessions:"sessions/",attendees:"attendees/"}}}),e.config(["ngToastProvider",function(e){e.configure({verticalPosition:"top",horizontalPosition:"left"})}]),e.config(["$routeProvider","config",function(e,s){e.when("/",{templateUrl:s.dirs.base+s.dirs.views.partials+"welcome.html",controller:"helloCtrl"}).when("/contact",{templateUrl:s.dirs.base+s.dirs.views.partials+"truc.html",controller:"helloCtrl"}).when("/about",{templateUrl:s.dirs.base+s.dirs.views.partials+"about.html",controller:"helloCtrl"}).when("/session",{templateUrl:s.dirs.base+s.dirs.views.sessions+"list.html",controller:"sessionsListCtrl"}).when("/newSession",{templateUrl:s.dirs.base+s.dirs.views.sessions+"new.html",controller:"sessionCtrl"}).when("/editSession/:_id",{templateUrl:s.dirs.base+s.dirs.views.sessions+"new.html",controller:"sessionCtrl"}).when("/session/:_id",{templateUrl:s.dirs.base+s.dirs.views.sessions+"details.html",controller:"sessionCtrl"}).when("/session/:sessionID/attendees",{templateUrl:s.dirs.base+s.dirs.views.attendees+"list.html",controller:"attendeesListCtrl"}).when("/session/:sessionID/attendees/:attendeeID",{templateUrl:s.dirs.base+s.dirs.views.attendees+"details.html",controller:"attendeeCtrl"}).otherwise({redirectTo:"/"})}])}(),function(){"use strict";var e=angular.module("myApp.attendeesController",["myApp.attendeesServices"]);e.controller("attendeeCtrl",["$scope","$location","$routeParams","Attendees",function(e,s,t,n){e.sessionID=t.sessionID||"",e.attendeeID=t.attendeeID||"",e.attendee=n.getAttendeeByID(e.sessionID,e.attendeeID),e.getAttendees=function(){e.sessionID&&s.url("/session/"+e.sessionID+"/attendees")},e.getSessions=function(){s.url("/session/")}}]),e.controller("attendeesListCtrl",["$scope","$location","$routeParams","Attendees",function(e,s,t,n){e.sessionID=t.sessionID||"",e.attendees=n.getAttendees(e.sessionID)||[],e.listAttendeesGrid={enableSorting:!0,enableRowSelection:!0,multiSelect:!1,modifierKeysToMultiSelect:!1,noUnselect:!0,enableRowHeaderSelection:!1,columnDefs:[{name:"name",displayName:"Attendee (click for details)",cellTemplate:"<span>{{row.entity.title}}&nbsp;{{row.entity.firstName}}&nbsp;{{row.entity.lastName}}</span>",width:"50%"}]},e.listAttendeesGrid.onRegisterApi=function(s){e.gridApi=s,s.selection.on.rowSelectionChanged(e,function(s){var t=s.entity;e.select(t)})};var i=function(){e.listAttendeesGrid.data=e.attendees=n.getAttendees(e.sessionID)||[]};e.refresh=function(){e.attendees=[],i()},e.select=function(e){e.attendeeVTID&&e.sessionVTID&&s.url("/session/"+e.sessionVTID+"/attendees/"+e.attendeeVTID)},e.gotoSessions=function(){s.url("/session/")},i()}])}(),function(){"use strict";var e=angular.module("myApp.attendeesServices",[]);e.factory("Attendees",["$resource",function(e){var s=function(){this.attendees=[],this.AllAttendees=e("/api/session/:sessionId/attendees",{sessionId:"@id"}),this.AttendeeByID=e("/api/session/:sessionId/attendees/:attendeeId",{sessionId:"@id",attendeeId:"@attId"}),this.getAttendees=function(e){var s=[];return this.AllAttendees.query({sessionId:e},function(e){for(var t=0;t<e.length;t++)s[t]=e[t]}),this.attendees=s,this.attendees},this.getAttendeeByID=function(e,s){return this.AttendeeByID.get({sessionId:e,attendeeId:s})},this.reset=function(){console.log("Not implemented yet")}};return console.log("Init Attendees factory"),new s}])}(),function(){"use strict";var e=angular.module("myApp.directives",[]);e.directive("sessionTitle",function(){return{restrict:"EA",template:"Session [{{session.sessionID}}] : <b>{{session.title}}</b>"}}),e.directive("attendeeTitle",function(){return{restrict:"EA",template:"{{attendee.title}}&nbsp;{{attendee.firstName}}&nbsp;<b>{{attendee.lastName}}</b>"}})}(),function(){"use strict";angular.module("myApp.filters",[])}(),function(){"use strict";var e=angular.module("myApp.controllers",[]);e.controller("headerCtrl",["$scope","$location",function(e,s){e.currentLocation=null,e.isActive=function(t){return e.currentLocation||(e.currentLocation=s),t==="/"+e.currentLocation.path().split("/")[1]}}]),e.controller("footerCtrl",["$rootScope","$scope","$location",function(e,s,t){e.$on("$locationChangeSuccess",function(){s.actualLocation=t.path()})}]),e.controller("mainCtrl",["$scope","ngToast",function(e,s){e.helloMessage="Hello World !",s.create({content:"Hello !",dismissButton:!0})}]),e.controller("helloCtrl",["$scope",function(e){e.helloMessage="Hello World !"}])}(),function(){"use strict";angular.module("myApp.sessionCtrl",["myApp.SessionSrv"]).controller("sessionCtrl",["$scope","$location","$routeParams","SessionSrv","config",function(e,s,t,n){var i=t._id||"";e.session={},e.isValid=!1,e.editMode=!1;var o=s.path().split("/")[1];"newSession"===o&&(e.editMode=!1),"editSession"===o&&(e.editMode=!0);var r=function(){e.session=i?n.get({_id:i}):new n,e.isValid=e.session?!0:!1};e.getAttendees=function(e){s.url("/session/"+e.sessionID+"/attendees")},e.saveSession=function(e){e.id&&confirm("Please confirm")?e.$update({_id:e._id},function(e){s.url("/session/"+e._id)}):e.$save(function(e){s.url("/session/"+e._id)})},e.removeSession=function(e){confirm("Please confirm session "+e.sessionID+" deletion.")&&e.$remove({_id:e._id},function(e){alert("Session "+e._id+" has been removed from database."),s.url("/session/")})},e.getSessions=function(){return s.url("/session/")},e.cancel=function(){r()},r()}])}(),function(){"use strict";angular.module("myApp.SessionSrv",[]).factory("SessionSrv",["$resource","config",function(e,s){return e(s.dirs.api.session+":_id",{_id:"@id"},{update:{method:"PUT",params:{_id:"@id"}},remove:{method:"DELETE",params:{_id:"@id"}}})}])}(),function(){"use strict";angular.module("myApp.sessionsListCtrl",["myApp.SessionSrv"]).controller("sessionsListCtrl",["$scope","$location","SessionSrv",function(e,s,t){e.listSessionsGrid={enableSorting:!0,enableRowSelection:!0,multiSelect:!1,modifierKeysToMultiSelect:!1,noUnselect:!0,enableRowHeaderSelection:!1,columnDefs:[{field:"sessionID",displayName:"Session ID"},{field:"title"},{field:"duration"},{field:"startDate"},{field:"type"},{field:"trainer"},{field:"site"},{field:"room"},{field:"company"},{field:"code"}]},e.listSessionsGrid.onRegisterApi=function(s){e.gridApi=s,s.selection.on.rowSelectionChanged(e,function(s){var t=s.entity;e.select(t)})};var n=function(){e.listSessionsGrid.data=t.query()||[]};e.select=function(e){e._id&&s.url("/session/"+e._id)},e.newSession=function(){s.url("/newSession/")},n()}])}();
//# sourceMappingURL=data:application/json;base64,